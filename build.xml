<project name="ZimbraWebClient" default="war">

	<!-- Properties -->

	<property file='build-custom.properties' />

	<property environment="env" />

	<property name='common.dir' value='../ZimbraCommon' />
	<property name='common.lib.dir' value='${common.dir}/jars' />
	<property name='common.build.dir' value='${common.dir}/build' />
	<property name='common.build.classes.dir' value='${common.build.dir}/classes' />

	<property name='taglib.dir' value='../ZimbraTagLib' />
	<property name='taglib.build.dir' value='${taglib.dir}/build' />

	<property name='server.dir' value='../ZimbraServer' />
	<property name='server.build.dir' value='${server.dir}/build' />

	<property name='license.dir' value='../ZimbraLicenses' />

	<property name='web.dir' value='WebRoot' />
	<property name='js.dir' value='${web.dir}/js' />
	<property name='jsp.dir' value='${web.dir}/public' />
	<property name='template.dir' value='${web.dir}/templates' />
	<property name='java.dir' value='src' />
	<property name='lib.dir' value='jars' />
	<property name='img.dir' value='${web.dir}/img' />

	<property name='webinf.dir' value='${web.dir}/WEB-INF' />
	<property name='webinf.lib.dir' value='${webinf.dir}/lib' />

	<property name='deploy.server' value='jetty' />

	<property name='build.dir' value='build' />
	<property name='build.classes.dir' value='${build.dir}/classes' />
	<property name='build.web.dir' value='${build.dir}/WebRoot' />
	<property name='build.css.dir' value='${build.web.dir}/css' />
	<property name='build.js.dir' value='${build.web.dir}/js' />
	<property name='build.template.dir' value='${build.web.dir}/templates' />
	<property name='build.skin.dir' value='${build.web.dir}/skins' />
	<property name='build.dist.dir' value='${build.dir}/dist' />

	<property name='build.img.dir' value='${build.web.dir}/img' />
	<property name="build.css.filename" value="images.css"/>

	<property name="depends.ext" value='.depends' />
	<property name="license.ext" value='.license' />
	<property name='nodebug.ext' value='.nodebug' />
	<property name="jsmin.ext" value='.min' />
	<property name="compress.ext" value='.zgz' />

	<!-- Tasks -->

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<fileset dir='${lib.dir}' includes='**/ant-contrib-*.jar' />
		</classpath>
	</taskdef>

	<!-- Paths -->

	<path id='class.path'>
		<pathelement location="${build.classes.dir}" />
		<fileset dir="${lib.dir}" includes="**/*.jar" />
		<fileset dir="${common.lib.dir}" includes="**/*.jar" />
		<pathelement location="${common.build.classes.dir}" />
	</path>

	<!-- Targets -->

	<target name='common'>
		<property name='common.web.includes' value='js/**,css/**' />
		<property name='common.web.excludes' value='**/ZmSettings.js,js/*/package/**' />
		<property name='common.jsp.includes' value='**' />
		<property name='common.jsp.excludes' value='' />
		<property name='common.img.includes' value='**' />
		<property name='common.img.excludes' value='_*/**,**/_*,logo/favicon.ico' />
		<property name='common.template.includes' value='**/*.template' />
		<property name='common.template.excludes' value='' />
		<property name='common.jam.includes' value='**/package/*.js' />
		<property name='common.jam.excludes' value='' />
		<property name='common.build.web.includes' value='**' />
		<property name='common.build.web.excludes' value='js/*${depends.ext},js/*${nodebug.ext},js/*${jsmin.ext},js/*${license.ext}' />
		<property name='common.webinf.includes' value='**' />
		<property name='common.webinf.excludes' value='web.*,lib/**' />
	</target>

	<target name='client' depends='common'>
		<property name='deploy.app' value='zimbra' />
		<property name='deploy.url.token' value='%%zimbraMailURL%%' />
		<property name='skins.dir' value='${web.dir}/skins' />
		<property name='web.includes' value='${common.web.includes},h/**,m/**,portals/**,test/**,yui/**' />
		<property name='web.excludes' value='${common.web.excludes},js/zimbraAdmin/**' />
		<property name='jsp.includes' value='${common.jsp.includes}' />
		<property name='jsp.excludes' value='${common.jsp.excludes},admin.jsp' />
		<property name='img.includes' value='${common.img.includes}' />
		<property name='img.excludes' value='${common.img.excludes}' />
		<property name='template.includes' value='${common.template.includes}' />
		<property name='template.excludes' value='${common.template.excludes},admin/**' />
		<property name='jam.includes' value='${common.jam.includes}' />
		<property name='jam.excludes' value='${common.jam.excludes},**/zimbraAdmin/**' />
		<property name='build.web.includes' value='${common.build.web.includes}' />
		<property name='build.web.excludes' value='${common.build.web.excludes}' />
		<property name='webinf.includes' value='${common.webinf.includes}' />
		<property name='webinf.excludes' value='${common.webinf.excludes}' />
	</target>

	<target name='admin' depends='common'>
		<property name='build.admin' value='true' />
		<property name='deploy.app' value='zimbraAdmin' />
		<property name='deploy.url.token' value='%%zimbraAdminURL%%' />
		<property name='skins.dir' value='${web.dir}/admin_skins' />
		<property name='web.includes' value='${common.web.includes},migrationwizard/**' />
		<property name='web.excludes' value='${common.web.excludes},js/zimbraMail/**' />
		<property name='jsp.includes' value='${common.jsp.includes}' />
		<property name='jsp.excludes' value='${common.jsp.excludes},launchNewWindow.jsp,login.jsp,*Mail.jsp,*ZCS.jsp,Spreadsheet*' />
		<property name='img.includes' value='${common.img.includes}' />
		<property name='img.excludes' value='${common.img.excludes}' />
		<property name='template.includes' value='admin/**,dwt/**,zimbra/**' />
		<property name='template.excludes' value='${common.template.excludes}' />
		<property name='jam.includes' value='${common.jam.includes}' />
		<property name='jam.excludes' value='${common.jam.excludes},**/zimbraMail/**' />
		<property name='build.web.includes' value='${common.build.web.includes}' />
		<property name='build.web.excludes' value='${common.build.web.excludes}' />
		<property name='webinf.includes' value='${common.webinf.includes}' />
		<property name='webinf.excludes' value='${common.webinf.excludes},tags/**,tlds/**' />
	</target>

	<target name='dev'>
		<property name='webxml.file' value='${webinf.dir}/web.xml' />
	</target>

	<target name='prod'>
		<property name='build.prod' value='true' />
		<property name='webxml.file' value='${webinf.dir}/web.xml.production' />
	</target>

	<target name='war' depends='templates,timezones,i18n,images,styles,settings,jam-files,compress,webxml-package-replace'>
		<mkdir dir='${build.war.dir}' />
		<war warfile="${build.war.file}" webxml='${build.dir}/web.xml'>
			<webinf dir='${webinf.dir}' includes='${webinf.includes}' excludes='${webinf.excludes}' />
			<classes dir='${build.classes.dir}' excludes='**/kabuki/tools/**,**/build/**' />
			<classes dir='${web.dir}' includes='messages/**,keys/**' />
			<lib dir='${lib.dir}' includes='gifencoder.jar' />
			<lib dir='${webinf.lib.dir}' />
			<lib dir='${common.build.dir}' includes='zimbracommon.jar' />
			<lib dir='${taglib.build.dir}' includes='zimbrataglib.jar' />
			<lib dir='${server.build.dir}' includes='zimbrastore.jar' />
			<zipfileset dir='${web.dir}' includes='${web.includes}' excludes='${web.excludes}' />
			<zipfileset dir='${jsp.dir}' includes='${jsp.includes}' excludes='${jsp.excludes}' prefix='public' />
			<zipfileset dir='${build.web.dir}' includes='${build.web.includes}' excludes='${build.web.excludes}' />
			<zipfileset dir='${img.dir}' includes='${img.includes}' excludes='${img.excludes}' prefix='img' />
			<zipfileset dir='${skins.dir}' prefix='skins' />
			<zipfileset refid='customer.web.fileset' />
		</war>
	</target>

	<target name='sync' depends='templates,timezones,i18n,images,styles,settings,jam-files,webxml-package-replace'>
		<copy todir='${webapp.dir}'>
			<fileset dir='${web.dir}' includes='${web.includes}' excludes='${web.excludes}' />
			<fileset dir='${build.web.dir}' excludes='js/*${depends.ext}' />
			<fileset refid='customer.web.fileset' />
		</copy>
		<copy todir='${webapp.dir}/public'>
			<fileset dir='${jsp.dir}' includes='${jsp.includes}' excludes='${jsp.excludes}' />
		</copy>
		<copy todir='${webapp.dir}/img'>
			<fileset dir='${img.dir}' includes='${img.includes}' excludes='${img.excludes}' />
		</copy>
		<copy todir='${webapp.dir}/skins'>
			<fileset dir='${skins.dir}' />
		</copy>
		<copy todir='${webapp.dir}/WEB-INF'>
			<fileset dir='${webinf.dir}' includes='${webinf.includes}' excludes='${webinf.excludes}' />
		</copy>
		<copy todir='${webapp.dir}/WEB-INF/classes'>
			<fileset dir='${build.classes.dir}' />
		</copy>

		<copy tofile="${webapp.dir}/WEB-INF/web.xml" file='${build.dir}/web.xml' />
		<antcall target='webxml-deploy-replace' />
	</target>

	<target name='init' depends='client,dev,pseudo-init,customer-init'>
		<!-- properties based on props set in client/admin/prod/dev targets -->
		<property name='build.war.dir' value='${build.dist.dir}/${deploy.server}/webapps' />
		<property name='build.war.file' value='${build.war.dir}/${deploy.app}.war' />
		<property name='deploy.dir' value='/opt/zimbra/${deploy.server}/webapps' />
		<property name='webapp.dir' value='${deploy.dir}/${deploy.app}' />
		<property name='webapp.file' value='${deploy.dir}/${deploy.app}.war' />

		<condition property='build.prod.value' value='true' else='false'>
			<isset property="build.prod" />
		</condition>

		<!-- deployment properties -->
		<tstamp />

		<!-- TODO: Does the production build set this before calling Ant? -->
		<condition property="zimbra.buildinfo.version" value="0.0">
			<not><isset property="${zimbra.buildinfo.version}" /></not>
		</condition>
		<condition property="zimbra.buildinfo.release" value="${user.name}">
			<not><isset property="${zimbra.buildinfo.release}" /></not>
		</condition>
		<condition property="zimbra.buildinfo.date" value="${DSTAMP}-${TSTAMP}">
			<not><isset property="${zimbra.buildinfo.date}" /></not>
		</condition>
		<condition property="zimbra.buildinfo.host" value="${zimbra.server.hostname}">
			<not><isset property="${zimbra.buildinfo.host}" /></not>
		</condition>

		<property name='properties.file' value='${build.dir}/build.properties' />

		<mkdir dir='${build.dir}' />
		<propertyfile file="${properties.file}" >
			<entry  key="build.number" type="int" default="1" operation="+" pattern="00000"/>
			<entry  key="build.date" type="date" value="now" pattern="yyyy-MM-dd HH:mm:ss" />
			<entry  key="build.simpleDate" type="date" value="now" pattern="yyMMddHHmmss"/>
			<entry  key="date.format" value="yyyyMMddHHmmss" />
		</propertyfile>
		<property file="${properties.file}" />
	</target>

	<target name='pseudo-init'>
		<!-- pseudo-fileset so that targets that rely on it don't fail -->
		<fileset id='customer.web.fileset' dir='${build.dir}' excludes='**' />
	</target>

	<target name='customer-init' if='env.CUSTOMER_SKIN' unless='build.admin'>
		<property name='customer.dir' value='../ZimbraCustomerServices/${env.CUSTOMER_SKIN}' />
		<property name='customer.web.dir' value='${customer.dir}/ZimbraWebClient/WebRoot' />
		<property name='customer.skin.dir' value='${customer.web.dir}/skins' />
		<property name='customer.portal.dir' value='${customer.web.dir}/portals' />
		<property name='customer.zimlet.dir' value='${customer.dir}/Zimlet' />
		<fileset id='customer.web.fileset'
				 dir='${customer.web.dir}' includes='skins/**,portals/**' excludes='**/*.template'
		/>
	</target>

	<target name='compile' depends='init,external'>
		<mkdir dir='${build.classes.dir}' />
		<javac destdir="${build.classes.dir}" classpathref="class.path" debug="true">
			<src location='${java.dir}' />
		</javac>
	</target>

	<target name='external' if='build.clean'>
		<ant dir='${common.dir}' target="jar" inheritall="false" />
		<ant dir='${taglib.dir}' target="jar" inheritall="false" />
		<ant dir='${server.dir}' target="jar" inheritall="false" />
	</target>

	<target name='templates' depends='compile'>
		<property name='templates.done' value='${build.dir}/templates.done' />

		<dependset>
			<srcfileset dir='${template.dir}' includes='**/*.template' />
			<srcfileset dir='${skins.dir}' includes='**/*.template' />
			<targetfileset dir='${build.template.dir}' includes='**/*.template.js' />
			<targetfilelist dir='.' files="${templates.done}" />
		</dependset>
		<if><and>
				<isset property="env.CUSTOMER_SKIN" />
				<not><isset property='build.admin' /></not>
			</and>
			<then>
				<dependset>
					<srcfileset dir='${customer.skin.dir}' includes='**/*.template' />
					<targetfileset dir='${build.web.dir}' includes='skins/**/*.template.js' />
					<targetfilelist dir='.' files="${templates.done}" />
				</dependset>
			</then>
		</if>

		<if><not><available file='${templates.done}' /></not>
			<then>
				<taskdef name='template'
						 classname='com.zimbra.kabuki.tools.templates.TemplateTask'
						 classpathref='class.path'
				/>
				<template destdir='${build.template.dir}'>
					<fileset dir='${template.dir}' includes='${template.includes}' excludes='${template.excludes}' />
				</template>
				<template destdir='${build.skin.dir}' authoritative='true'>
					<fileset dir='${skins.dir}' includes='**/*.template' />
				</template>

				<antcall target="customer-templates" />

				<touch file="${templates.done}" />
			</then>
		</if>
	</target>

	<target name='customer-templates' depends='compile' if='env.CUSTOMER_SKIN' unless='build.admin'>
		<dirset id='skins.dirset' dir='${customer.skin.dir}' includes='*' />
		<pathconvert property="skins.list" refid="skins.dirset" pathsep=",">
			<flattenmapper />
		</pathconvert>
		<for list='${skins.list}' param='name'>
			<sequential>
				<template destdir='${build.web.dir}/skins' authoritative='true'>
					<fileset dir='${customer.skin.dir}' includes='@{name}/**/*.template' />
				</template>
			</sequential>
		</for>
	</target>

	<target name='timezones' depends='compile'>
		<property name='tz.data' value='${server.dir}/conf/timezones.ics' />
		<property name='tz.dir' value='${build.js.dir}/ajax/util' />
		<property name='tz.file' value='${tz.dir}/AjxTimezoneData.js' />

		<dependset>
			<srcfilelist dir="." files='${tz.data}' />
			<targetfilelist dir='.' files='${tz.file}' />
		</dependset>

		<if><not><available file='${tz.file}' /></not>
			<then>
				<mkdir dir='${tz.dir}' />
				<echo>Generating ${tz.file}</echo>
				<java classname="com.zimbra.kabuki.tools.tz.GenerateData">
					<classpath refid="class.path" />
					<classpath path="${build.classes.dir}" />
					<arg value="-i"/>
					<arg value="${tz.data}"/>
					<arg value="-o"/>
					<arg value="${tz.file}"/>
				</java>
			</then>
		</if>
	</target>

	<target name='i18n' depends='compile'>
		<property name='i18n.msgs.dir' value='${build.classes.dir}/messages' />
		<property name='i18n.msgs.file' value='${i18n.msgs.dir}/I18nMsg.properties' />

		<dependset>
			<srcfileset dir='${java.dir}' includes='**/i18n/GenerateData*.java' />
			<targetfilelist dir='.' files='${i18n.msgs.file}' />
		</dependset>

		<if><not><available file='${i18n.msgs.file}' /></not>
			<then>
				<taskdef name='i18n'
						 classname='com.zimbra.kabuki.tools.i18n.GenerateDataTask'
						 classpath='${build.classes.dir}'
				/>

				<mkdir dir='${i18n.msgs.dir}' />
				<i18n destdir='${i18n.msgs.dir}' />
			</then>
		</if>
	</target>

	<target name='images' depends='images-init'>
		<!--<property name='img.css.dir' value='_compiled' />-->
		<!--<property name='img.css.file' value='${build.css.filename}' />-->
		<!--<property name='img.dir.ignore' value='animated,_*' />-->
		<!--<property name='img.dir.nomerge' value='examples,logo,translate' />-->

		<copy todir="${build.web.dir}" flatten="true">
			<fileset dir='${img.dir}' includes='**/logo/favicon.ico'/>
		</copy>

		<dependset>
			<srcfileset dir='${img.dir}' />
			<srcfileset dir='${java.dir}' includes='**/img/*.java' />
			<targetfilelist dir='${build.img.dir}' files='${build.css.filename}' />
		</dependset>

		<if><not><available file='${build.img.dir}/${build.css.filename}' /></not>
			<then>
				<mkdir dir="${build.img.dir}" />

				<!-- core images -->
				<imagemerge destdir='${build.img.dir}' disable='true'
							cssfile='${build.css.filename}' csspath='/${deploy.app}/img/'>
					<dirset dir='${web.dir}' includes='img/**' />
				</imagemerge>

				<replace token="@jsVersion@" value="${build.simpleDate}" file='${build.img.dir}/${build.css.filename}' />

				<!-- skin images -->
				<dirset id='skins.dirset' dir='${skins.dir}' includes='*' />
				<pathconvert property='skins.dirs' refid='skins.dirset' pathsep=','>
					<flattenmapper />
				</pathconvert>

				<foreach list='${skins.dirs}' target='build-skin-images' param='skindir'>
					<param name="skinbasedir" value="WebRoot"/>
				</foreach>

				<!-- customer skin images -->
				<antcall target='customer-skin-images' />
			</then>
		</if>
	</target>

	<target name='images-init' depends='compile'>
		<taskdef name='imagemerge'
				 classname='com.zimbra.kabuki.tools.img.ImageMergeTask'
				 classpathref='class.path'
		/>
	</target>

	<target name='customer-skin-images' if='env.CUSTOMER_SKIN' unless='build.admin'>
		<dirset id='customer.skins.dirset' dir='${customer.web.dir}' includes='skins/*' />
		<pathconvert property='customer.skins.dirs' refid='customer.skins.dirset' pathsep=','>
			<flattenmapper />
		</pathconvert>

		<for list='${customer.skins.dirs}' param='skindir'>
			<sequential>
				<if><available file="${customer.skin.dir}/@{skindir}/img/icons" />
					<then>
						<mkdir dir="${build.web.dir}/skins/@{skindir}/img/icons" />
						<copy todir="${build.web.dir}/skins/@{skindir}/img/icons">
							<fileset dir="${img.dir}" includes='${img.includes}' excludes='${img.excludes}'/>
						</copy>
						<copy todir="${build.web.dir}/skins/@{skindir}/img/icons" overwrite="true">
							<fileset dir="${customer.skin.dir}/@{skindir}/img/icons" />
						</copy>
					</then>
				</if>
				<antcall target='build-skin-images'>
					<param name="skindir" value="@{skindir}" />
					<param name="skinbasedir" value="${customer.web.dir}"/>
				</antcall>
			</sequential>
		</for>
	</target>

	<target name='build-skin-images' depends='images-init,build-skin-images-init'
			if='skin-images-present'>
		<property name='build.this.skin.dir' value='${build.web.dir}/skins/${skindir}/img' />

		<mkdir dir="${build.this.skin.dir}"/>
		<delete file='${build.this.skin.dir}/${build.css.filename}'/>

		<echo/>
		<echo message='Merging images for skin ${skindir}'/>
		<echo/>
		<imagemerge destdir='${build.this.skin.dir}' disable="true"
					cssfile='${build.css.filename}' csspath='/${deploy.app}/skins/${skindir}/img/'>
			<dirset dir='${skinbasedir}/skins/${skindir}' includes='img/**'/>
		</imagemerge>

		<replace token="@jsVersion@" value="${build.simpleDate}" file='${build.this.skin.dir}/${build.css.filename}' />
  </target>

	<target name='build-skin-images-init'>
		<condition property="skin-images-present">
			<or>
				<isset property='images.force' />
				<available file="${skinbasedir}/skins/${skindir}/img" type="dir" />
			</or>
		</condition>
	</target>

	<target name='styles'>
		<property name='styles.dir' value='${build.web.dir}/css' />

		<mkdir dir='${styles.dir}' />
		<copy todir='${styles.dir}' flatten='true'>
			<fileset dir='${js.dir}' includes='**/style/*.css' />
		</copy>
	</target>

	<target name='settings' depends='init' unless='build.admin'>
		<property name='settings.dir' value='${build.js.dir}/zimbraMail/share/model' />
		<property name='settings.file' value='${settings.dir}/ZmSettings.js' />

		<mkdir dir='${settings.dir}' />
		<copy todir='${settings.dir}' flatten='true'>
			<fileset dir='${js.dir}' includes='**/ZmSettings.js' />
		</copy>
		<replace file="${settings.file}" token="@buildVersion@" value="${zimbra.buildinfo.version}" />
		<replace file="${settings.file}" token="@buildRelease@" value="${zimbra.buildinfo.release}" />
		<replace file="${settings.file}" token="@buildDateTime@" value="${DSTAMP}-${TSTAMP}" />
	</target>

	<target name='jam-files' depends='templates,timezones'>
		<property name='jam.jsp.dir' value='${build.web.dir}/public/jsp' />

		<mkdir dir='${build.js.dir}' />
		<mkdir dir='${jam.jsp.dir}' />

		<copy todir='${build.js.dir}' flatten='true'>
			<fileset dir='${js.dir}' includes='${jam.includes}' excludes='${jam.excludes}' />
		</copy>

		<taskdef name="packagedependset"
				 classname="com.zimbra.webClient.build.PackageDependSetTask"
				 classpath="${build.classes.dir}"
		/>
		<taskdef name="jammer"
				 classname="com.zimbra.webClient.build.PackageJammerTask"
				 classpath="${build.classes.dir}"
		/>

		<fileset id='jam-files.fileset' dir='${build.js.dir}' includes='*.js' excludes='*_all.js' />
		<pathconvert property="jam-files.list" refid="jam-files.fileset" pathsep=','>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*.js" to="*" />
			</chainedmapper>
		</pathconvert>

		<!-- NOTE: This has to be done in a separate target call so that
				   the property values are isolated from each other. -->
		<foreach target='jam-file' list='${jam-files.list}' param='arg' />
		<!--<foreach target='jam-file' list='Zimbra' param='arg' />-->
	</target>

	<target name='jam-file'>
		<fail message='This target cannot be called directly.' unless='arg' />

		<property name='jam.file' value='${build.js.dir}/${arg}_all.js' />
		<property name='jsp.file' value='${build.web.dir}/public/jsp/${arg}.jsp' />
		<property name='depends.file' value='${build.js.dir}/${arg}${depends.ext}' />

		<packagedependset>
			<srcdependslist dir='.' files='${depends.file}' />
			<srcfileset dir='${java.dir}' includes='**/PackageJammerTask.java' />
			<targetfilelist dir='.' files='${jam.file}' />
			<targetfilelist dir='.' files='${jsp.file}' />
		</packagedependset>

		<if><not><available file='${jam.file}' /></not>
			<then>
				<!-- TODO: need to fix this for new dir layout -->
				<condition property='wrap' value='false' else='true'>
					<equals arg1='${arg}' arg2='Boot' />
				</condition>

				<property name='jam.template.dir' value='${build.template.dir}' />
				<patternset id='jam.template.fileset' excludes='**' />
				<if><or><equals arg1='${arg}' arg2='Ajax' />
						<equals arg1='${arg}' arg2='AjaxZWC' />
					</or>
					<then>
						<patternset id='jam.template.fileset' includes='dwt/**' />
					</then>
				</if>
				<if><or><equals arg1='${arg}' arg2='Zimbra' />
						<equals arg1='${arg}' arg2='ZimbraZWC' />
					</or>
					<then>
						<patternset id='jam.template.fileset' includes='zimbra/**' />
					</then>
				</if>
				<if><equals arg1='${arg}' arg2='Admin' />
					<then>
						<patternset id='jam.template.fileset' includes='admin/**' />
					</then>
				</if>
				<if><equals arg1='${arg}' arg2='ZimbraCore' />
					<then>
						<patternset id='jam.template.fileset' excludes='dwt/**,zimbra/**,admin/**' />
					</then>
				</if>

				<jammer jsDestFile='${jam.file}' htmlDestFile='${jsp.file}'
						dependsFile='${depends.file}' output='all'
						basepath='&lt;%=contextPath%>/js/'
						extension='.js?v=&lt;%=vers%>'>
					<prefix output='html'><![CDATA[<%
String contextPath = request.getContextPath();
if(contextPath.equals("/")) contextPath = "";
String vers = (String) request.getAttribute("version");
if (vers == null) vers = "";
String ext = (String) request.getAttribute("fileExtension");
if (ext == null) ext = "";
%>]]></prefix>
					<!-- NOTE: order is important; need to find generated files first -->
					<src dir='${build.js.dir}' />
					<src dir='${build.template.dir}' />
					<src dir='${js.dir}' />
					<filelist dir='${build.js.dir}' files='${arg}.js' wrap='${wrap}' />
					<!-- include templates, if found -->
					<fileset dir='${jam.template.dir}' wrap='${wrap}'
							 basepath='&lt;%=contextPath%>/templates/'
							 extension='.template.js?v=&lt;%=vers%>'>
						<patternset refid="jam.template.fileset"/>
					</fileset>
				</jammer>
			</then>
			<else>
				<echo>Skipping ${jam.file}. File is up-to-date.</echo>
			</else>
		</if>
	</target>

	<target name='compress' depends='jam-files' if='build.prod'>
		<property name='asl.files' value='LICENSE.txt,NOTICE.txt' />
		<property name='zpl.files' value='zimbra/preamble-ZPL-WebClient.txt' />

		<property name='preamble.asl.file' value='${build.dir}/preamble-asl.txt' />
		<property name='preamble.zpl.file' value='${build.dir}/preamble-zpl.txt' />

		<fileset id="js-includes" dir="${build.js.dir}" includes="*_all.js" />

		<!-- generate preambles -->
		<dependset>
			<srcfilelist dir='.' files='${asl.files}' />
			<targetfilelist dir='.' files='${preamble.asl.file}' />
		</dependset>
		<if><not><available file='${preamble.asl.file}' /></not>
			<then>
				<echo>Generating ASL preamble</echo>
				<concat destfile="${preamble.asl.file}">
					<header>/*</header>
					<footer>*/</footer>
					<filelist dir='.' files='${asl.files}' />
				</concat>
			</then>
		</if>

		<dependset>
			<srcfilelist dir='${license.dir}' files='${zpl.files}' />
			<targetfilelist dir='.' files='${preamble.zpl.file}' />
		</dependset>
		<if><not><available file='${preamble.zpl.file}' /></not>
			<then>
				<echo>Generating ZPL preamble</echo>
				<concat destfile="${preamble.zpl.file}">
					<header>/*</header>
					<footer>*/</footer>
					<filelist dir='${license.dir}' files='${zpl.files}' />
				</concat>
			</then>
		</if>

		<!-- minimize js -->
		<for param="var">
			<path><fileset refid="js-includes" /></path>
			<sequential>
				<dependset>
					<srcfilelist dir='.' files='@{var}' />
					<targetfilelist dir='.' files='@{var}${jsmin.ext}' />
				</dependset>
				<if><not><available file='@{var}${jsmin.ext}' /></not>
					<then>
						<copy tofile="@{var}${nodebug.ext}" file='@{var}' />
						<echo>Stripping debug to @{var}${nodebug.ext}</echo>
						<replaceregexp byline="true">
							<regexp pattern="DBG.print(.*);|DBG.time(.*);|DBG.dump(.*);|DBG.setTitle(.*);" />
							<substitution expression=" " />
							<fileset file="@{var}${nodebug.ext}"/>
						</replaceregexp>
						<echo>Minimizing to @{var}${jsmin.ext}</echo>
						<java jar="${common.lib.dir}/custom_rhino.jar" fork="true" failonerror="true"
							  output="@{var}${jsmin.ext}">
							<jvmarg  value="-Xmn100M"/>
							<jvmarg  value="-Xms500M"/>
							<jvmarg  value="-Xmx500M"/>
							<arg value="-opt" />
							<arg value="-1" />
							<arg value="-c" />
							<arg value="@{var}${nodebug.ext}" />
						</java>
					</then>
				</if>
			</sequential>
		</for>

		<!-- prepend licenses -->
		<for  param="var">
			<path><fileset dir="${build.js.dir}" includes='Boot_all.js,Ajax*_all.js' /></path>
			<sequential>
				<dependset>
					<srcfilelist dir='.' files='@{var}${jsmin.ext}' />
					<targetfilelist dir='.' files='@{var}${license.ext}' />
				</dependset>
				<if><not><available file='@{var}${license.ext}' /></not>
					<then>
						<echo>Prepending ASL to @{var}${license.ext}</echo>
						<concat destfile="@{var}${license.ext}">
							<header file='${preamble.asl.file}' filtering='no' />
							<fileset file='@{var}${jsmin.ext}' />
						</concat>
					</then>
				</if>
			</sequential>
		</for>
		<for param="var">
			<path><fileset dir="${build.js.dir}" includes='*_all.js' excludes='Boot*,Ajax*' /></path>
			<sequential>
				<dependset>
					<srcfilelist dir='.' files='@{var}${jsmin.ext}' />
					<targetfilelist dir='.' files='@{var}${license.ext}' />
				</dependset>
				<if><not><available file='@{var}${license.ext}' /></not>
					<then>
						<echo>Prepending ZPL to @{var}${license.ext}</echo>
						<concat destfile="@{var}${license.ext}">
							<header file='${preamble.zpl.file}' filtering='no' />
							<fileset file='@{var}${jsmin.ext}' />
						</concat>
					</then>
				</if>
			</sequential>
		</for>

		<!-- compress files -->
		<for param="var">
			<path><fileset refid="js-includes" /></path>
			<sequential>
				<gzip destfile="@{var}${compress.ext}" src="@{var}${license.ext}" />
			</sequential>
		</for>
	</target>

	<target name='deploy' depends='war'>
		<ant dir="${server.dir}" target="stop-jetty" inheritAll="false"/>

		<echo>Deploy ${build.war.file} to ${deploy.dir}</echo>
		<delete dir="${webapp.dir}"/>
		<delete file="${webapp.file}"/>

		<mkdir dir='${webapp.dir}' />
		<copy file="${build.war.file}" todir="${deploy.dir}"/>
		<unzip dest='${webapp.dir}' src="${webapp.file}" />

		<antcall target='webxml-deploy-replace' />

		<ant dir="${server.dir}" target="start-jetty" inheritAll="false"/>

		<if><and>
				<not><isset property="build.admin" /></not>
				<available file='${customer.zimlet.dir}' />
			</and>
			<then>
				<ant dir="${customer.zimlet.dir}" target="deploy-zimlets" inheritAll="false" />
			</then>
		</if>
	</target>

	<target name='webxml-package-replace' depends='init'>
		<copy tofile="${build.dir}/web.xml" file='${webxml.file}' />
		<!-- replace @xyz@ tokens -->
		<replace file="${build.dir}/web.xml" token="@prodMode@" value="${build.prod.value}" />
		<replace file="${build.dir}/web.xml" token="@jsVersion@" value="${build.simpleDate}" />
		<replace file="${build.dir}/web.xml" token="@mailUrl@" value="/zimbra" />
		<replace file="${build.dir}/web.xml" token="@adminUrl@" value="/zimbraAdmin" />
	</target>

	<target name='webxml-deploy-replace' depends='init'>
		<!-- replace %%xyz%% tokens -->
		<replace file="${webapp.dir}/WEB-INF/web.xml" token="${deploy.url.token}" value="/${deploy.app}" />
		<replace file="${webapp.dir}/WEB-INF/web.xml" token="%%zimbraMailPort%%" value="7070" />
	</target>

	<target name='clean'>
		<!--<property name='build.clean' value='true' />-->
		<delete dir='${build.dir}' />
	</target>

	<!-- LEGACY TARGETS -->
	<target name='dev-sync'				depends='sync' />
	<target name='prod-war'				depends='prod,war' />
	<target name='prod-deploy'			depends='prod,deploy' />
	<target name='admin-dev-sync'		depends='admin,sync' />
	<target name='admin-war'			depends='admin,prod,war' />
	<target name='admin-dev-war'		depends='admin,war' />
	<target name='admin-deploy'			depends='admin,deploy' />
	<target name='admin-prod-deploy'	depends='admin,prod,deploy' />

	<target name='restart-webserver'>
		<ant dir="${server.dir}" target="restart-webserver" />
	</target>

</project>
